{"componentChunkName":"component---src-templates-post-jsx","path":"/03-class-seperator-immutable/","result":{"data":{"site":{"siteMetadata":{"title":"jeongjae's.blog"}},"markdownRemark":{"id":"2eab0556-2a3c-5ebd-bac3-9bb62c43d6b0","excerpt":"객체 설계와 클래스 분리에 대한 두려움과 거부감 줄이기 정성적인 객체 설계의 어려움을 정량적인 원칙을 지키는 방식으로 도전 클래스 분리를 위한 정략적인 원칙 찾기 소트웍스 앤솔리지 책 중에서 객체지향 생활 체조 원칙 엘레강트 오브젝트 23가지 조언 중에서 클린코드 중에서 책을 읽으면서 정량적인 원칙을 찾기 위한 노력을 해본다 소트웍스 앤솔리지 책 중에서 …","html":"<ul>\n<li>객체 설계와 클래스 분리에 대한 두려움과 거부감 줄이기</li>\n<li>정성적인 객체 설계의 어려움을 정량적인 원칙을 지키는 방식으로 도전</li>\n<li>클래스 분리를 위한 정략적인 원칙 찾기</li>\n<li>소트웍스 앤솔리지 책 중에서 객체지향 생활 체조 원칙</li>\n<li>엘레강트 오브젝트 23가지 조언 중에서</li>\n<li>클린코드 중에서</li>\n<li>책을 읽으면서 정량적인 원칙을 찾기 위한 노력을 해본다</li>\n</ul>\n<h4>소트웍스 앤솔리지 책 중에서 * 객체지향 생활 체조 원칙</h4>\n<ul>\n<li>원시값을 포장해라</li>\n<li>getter 메서드를 최대한 사용하지 마라</li>\n<li>묻지말고 시켜라(메시지를 보내라)</li>\n<li>생성자 정말 중요하다!!</li>\n<li>일급콜렉션을 쓴다</li>\n<li>\n<p>3개 이상의 인스턴스 변수를 가진 클래스를 구현하지 않는다</p>\n<ul>\n<li>정말 구현하기 어렵다</li>\n<li>인스턴스 변수를 2개만 허용한다는 의미</li>\n</ul>\n</li>\n<li>도메인 객체와 테이블간의 관계가 1:1로 개발되고 있다 뭔가 잘못 되고 있따</li>\n<li>보통 테이블 한개당 도메인 객체는 N개가 되어야 한다</li>\n</ul>\n<h4>인스턴스 변수의 수를 줄이는 좋은 방법은?</h4>\n<ul>\n<li>중복된 값 또는 불필요한 인스턴스 변수를 있는지를 확인해 제거</li>\n<li>\n<p>관련있는 인스턴스 변수를 새로운 클래스(객체) 묶어서 분리</p>\n<ul>\n<li>원시값 포장</li>\n<li>일급컬렉션</li>\n<li>관련된 인자를 새로운 클래스로 묶어라</li>\n<li>프라이빗 메서드로 테스트 해야할 것 같으면 새로운 클래스로 분리할 것인지 의심해라 (feat. Enum)</li>\n<li>이러면 클래스가 작아지네 TDD하기 수월해지네? 이느낌을 받아야한다</li>\n<li>Enum 안에 각각이 싱글 인스턴스이다</li>\n<li>Enum은 상태를 변경하는 로직이 절대 있으면 안된다</li>\n</ul>\n</li>\n</ul>\n<h4>Immutable vs Mutable</h4>\n<ul>\n<li>가능한 Immutable 객체로 개발해라!</li>\n<li>\n<p>문제점이 있다</p>\n<ul>\n<li>방어적 복사본을 위한 새로은 인스턴스를 많이 생성하게 된다.</li>\n<li>그럴땐 캐싱을 이용하자 ex) Map&#x3C;Integer, LottoNo></li>\n<li>인스턴스가 많이 만들어져서 이슈가되는 경우는 극소수다.</li>\n<li>대 부분 성능이슈는 데이터베이스 외부 API 등이다</li>\n<li>인건비가 더 비싸다!</li>\n</ul>\n</li>\n<li>클래스 분리할때 Immutable로 해라!!!!</li>\n</ul>\n<h4>객체지향으로 개발하게 되면</h4>\n<ul>\n<li>첫 번째 테스트하기 쉬워진다</li>\n<li>두 번째 비지니스 로직의 중복을 제거한다</li>\n<li>\n<p>getter를 하는 순간 로직 중복이 일어난다</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> p <span class=\"token operator\">=</span> position<span class=\"token punctuation\">.</span><span class=\"token function\">getPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\np <span class=\"token operator\">=</span> p <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nposition<span class=\"token punctuation\">.</span><span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>전형적인 절차지향적이다\nC의 구조체 방식(메서드가 없기때문에)</p>\n</li>\n</ul>\n<p>Enum 은 클래스랑 똑같고\nJVM 상 하나만 가지는 것만 보장해주는 것이다</p>\n<h4>포비 말대로 미션 이외에도 다른 곳에서도 원시 값 포장을 적용해보려고 하고있습니다! 그런데 페이징 처리 같은 Page 도 포장을 해야할까요?</h4>\n<ul>\n<li>Page 객체는 도메인 레벨이 아닌 것 같다 그래서 해당 객체는 원시값 포장안하고 도메인 관련 객체만 하는게 좋을 것 같다</li>\n</ul>\n<h4>만약 getter를 쓰지 않는다면 이후에 Position이 ResultView까지 전달됐을 때는 어떻게 값을 얻는게 좋을까요?</h4>\n<ul>\n<li>마지막 단계에선는 getter 메서드가 필요할 수 있다</li>\n<li>View에서 필요한 데이터만 내려가야 한닫고 생각한다</li>\n<li>필요할 수 있지만 최소화 하자(무조건 만들지 말자!)</li>\n</ul>\n<h4>UI를 제와한 모든 경우를 테스트하라는 요구사항이 있었는데요. Controller, View를 제외하고 도메인과 Service 계층이 남는데, Service가 도메인에 책임을 위임만 한다면 테스트할 필요가 없나요?</h4>\n<ul>\n<li>마지막날 집중적으로 이야기 할 것이다</li>\n<li>무조건 테스트를 다 만드는게 유지보수와 개발측면에서 아닐 수 있다</li>\n<li>우선순위가 있다 서비스 레이어는 1순위는 아니다</li>\n</ul>\n<h4>래핑한 객체를 view에서 사용하기 위해 외부로 반환할 때 래핑된 그대로 반환하는 것이 좋을까요? 아니면 원시 형태로 풀어서 반환하는 것이 좋나요?</h4>\n<ul>\n<li>Mutable 객체를 내려주는 것 보다는 Immutable 객체를 내려 줘라</li>\n<li>Mutable 객체를 어떻게 Immutable 객체로 반환해서 내려줄 것이냐가 중요하다</li>\n<li>객체를 immutable 로 개발했을때 버그가 발생할 가능성이 낮아진다</li>\n<li>상태값을 변경하는 로직이 중요한 로직이다</li>\n<li>변경점을 최소화 하자</li>\n<li>외부에서 상태값을 변경할 수 있는 여지를 줄이자</li>\n</ul>\n<h4>여기서 RacingGame.java 를 컨트롤러 라고 부를 수 있는건가요?</h4>\n<ul>\n<li>RacingGame은 도메인 객체이고</li>\n<li>RacingMain 이 컨트롤러라고 할 수 있다</li>\n<li>굳이 컨트롤러를 만들어서 위임할 필요성 크게 의미 없다</li>\n<li>너무 레이어드 아키텍쳐에 익숙해져서 그럴 수 있다</li>\n<li>너무 강박처럼 컨트롤러 클래스 서비스 클래스 만드려고한다</li>\n<li>그런데 정말 그 레이어가 필요한지 생각해보자</li>\n<li>콘솔프로그램도 MVC기반으로 할 수 있다</li>\n<li>서비스 레이어는 왜 필요한건가요?</li>\n</ul>\n<h4>0개를 사용한다는 것과 &#x3C;-> 인스턴스 변수를 2개 이하로 사용해보자는 것이 상충하는 부분도 있을것 같은데, 이 부분은 어떻게 하면 되나요?</h4>\n<ul>\n<li>인스턴스 변수는 관련있는 것끼리 묶는다</li>\n<li>WinningLottNumber 처림</li>\n</ul>\n<h4>로또 결과 출력때 stream 여러번 호출을 줄이기 위해서 미리 결과 map을 만들고 꺼내고있는데요</h4>\n<ul>\n<li>로직에 대한 결과를 저장해놓으려고 하지말고</li>\n<li>디비를 호출하는 로직이 없다면 성능상의 큰 이슈는 없다고 생각한다</li>\n</ul>\n<h4>다른 분들이랑 커뮤니케이션 하는 능력을 키우면 좋다고 해주셨는데 의식적으로 어떤 노력을 하면 좋을까요?</h4>\n<ul>\n<li>소통의 1단계는 짝 프로그래밍을 하면 좋다고 생각한다</li>\n<li>같은 관심사의 채널 내에서 짝 프로그래밍할 사람을  찾아라</li>\n<li>그 다음에는 스터디!!</li>\n<li>커뮤니터 스터디 활동 정말 추천한다!</li>\n<li>짝 프로그래밍 하고싶은데 여기 분들 뵙기 너무 힘듭니다 SLiPP 게더 놀러오십셔!</li>\n</ul>\n<h4>도메인을 잘 나눴을 때 모듈이나 프로젝트를 나눠서 이벤트호출 방식 등으로 구현을 한다면 분산트랜젝션은 전략은 어떤 방법이 있을까요?</h4>\n<ul>\n<li>즉시에 100% 트랜잭션을 보장하는건 어렵다고 생각한다</li>\n<li>후처리를 통해서 데이터 정합성을 맞출 수 있는 방식으로 가야하지 않을까?</li>\n<li>예전부터 트랜잭션이 하나로 묶이고 즉시에 데이터 정합성이 보장되어야한다고 생각하는데 예전 은행 로직처럼</li>\n<li>후처리로도 데이터 정합성을 맞출 수 있는데 이런 부분을 활용하는 방법</li>\n<li>너무 DBA나 기존 생각에 갇혀있으면 즉시에 보장되어야한다고 한다 하지만 이생각을 조금 바꿔서 후처리 전략으로(큐 같은걸 사용하거나) 가는 것도 방법이라고 생각한다</li>\n<li>일시적으로 데이터 정합성이 안맞을 수 있지만 허용한 가능한 범위라고 본다면 괜찮지 않을까요</li>\n</ul>\n<h4>분산트랙젠션 답변 주신 것에 이어서.. 그러면 트랜젝션이 중요한 부분이라도 도메인끼리 조금 섞어서 단일트랜잭션을 유지하는게 나을수도 있을까요?</h4>\n<ul>\n<li>여러 도메인이 후 처리가 안된다는건 너무 결합도와 커플링이 높아서 그런 것 아닐까 생각한다</li>\n<li>지속 가능한 소프트 웨어 개발이 중요하다고 생각한다</li>\n<li>객체지향 방법론을 저는 공부 많이했고 실제 사용해봐서 그런 저의 역량을 통해 더 유지보수하고 지속가능한 좋은 소프트 웨어 개발을 할 수 있을 거라 생각 합니다 이회사에도 도움이 될꺼다</li>\n<li>몸값을 올리거나 스톡을주는 회사를 가는게 빠르다</li>\n</ul>","frontmatter":{"title":"3차 강의 - 클래스 분리 & immutable","date":"May 04, 2022","update":"May 04, 2022","tags":["tdd","java","clean-code","class","oop","refactoring","immutable"],"series":"TDD, 클린 코드 with Java 14기"},"fields":{"slug":"/03-class-seperator-immutable/","readingTime":{"minutes":11.145}}},"seriesList":{"edges":[{"node":{"id":"2eab0556-2a3c-5ebd-bac3-9bb62c43d6b0","fields":{"slug":"/03-class-seperator-immutable/"},"frontmatter":{"title":"3차 강의 - 클래스 분리 & immutable"}}},{"node":{"id":"51da159b-577e-568e-934e-f9f4a260ec5a","fields":{"slug":"/05-responsibility-driven-design-dev-culture/"},"frontmatter":{"title":"5차 강의 - 책임주도 설계, 개발문화 만들기"}}}]},"previous":null,"next":{"fields":{"slug":"/05-responsibility-driven-design-dev-culture/"},"frontmatter":{"title":"5차 강의 - 책임주도 설계, 개발문화 만들기"}}},"pageContext":{"id":"2eab0556-2a3c-5ebd-bac3-9bb62c43d6b0","series":"TDD, 클린 코드 with Java 14기","previousPostId":null,"nextPostId":"51da159b-577e-568e-934e-f9f4a260ec5a"}},"staticQueryHashes":[]}